################
VECTOR FUNCTIONS
################


t_vecX structure :
------------------

t_vec2, t_vec3 and t_vec4 represent respectively 2, 3 and 4 dimension vectors.
They contain 2 to 4 double variables, named x, y, z and w.


Vector initialization :
-----------------------

Prototypes :
t_vec2			init_vec2(double x, double y);
t_vec3			init_vec3(double x, double y, double z);
t_vec4			init_vec4(double x, double y, double z, double w);

Initializes a t_vecX structure.

Parameters :
2 to 4 doubles to store in the t_vecX structure.

Return Value :
An initialized t_vec4 structure.


Vector conversion :
-------------------

Prototype :
t_vec3			vec4_to_vec3(t_vec4  v);

Converts a t_vec4 struct to a t_vec3 struct.

Parameters :
A t_vec4 structure to be converted.

Return Value :
A t_vec3 structure containing the x, y and z values of the original t_vec4
structure.


Vector addition :
-----------------

Prototypes :
t_vec2			add_vec2(t_vec2 u, t_vec2 v);
t_vec3			add_vec3(t_vec3 u, t_vec3 v);
t_vec4			add_vec4(t_vec4 u, t_vec4 v);

Adds a vector v to a vector u.

Parameters :
Two t_vecX structures to be summed.

Return Value :
A t_vecX structure containing the addition result of the vectors u and v.


Vector substraction :
---------------------

Prototypes :
t_vec2			sub_vec2(t_vec2 u, t_vec2 v);
t_vec3			sub_vec3(t_vec3 u, t_vec3 v);
t_vec4			sub_vec4(t_vec4 u, t_vec4 v);

Substracts a vector v to a vector u.

Parameters :
Two t_vecX structures to be substracted.

Return Value :
A t_vecX structure containing the substraction result of the vectors u and v.


Reverse vector :
----------------

Prototypes :
t_vec2			rev_vec2(t_vec2 u);
t_vec3			rev_vec3(t_vec3 u);
t_vec4			rev_vec4(t_vec4 u);

Reverses a vector.

Parameters :
A t_vecX vector u.

Return Value :
A t_vecX structure containing the original vector's inverse.


Vector norm :
-------------

Prototype :
double			norm_vec4(t_vec4 v);

Calculates and return the norm of a vector.

Parameters :
A t_vec4 vector v;

Return Value :
A double type variable containing the norm of the vector.


Normalize vector :
------------------

Prototype :
t_vec4			normalize_vec4(t_vec4 v);

Normalizes a vector so that it's norm equals 1.

Parameters :
A t_vec4 vector v;

Return Value :
A t_vec4 structure containing the normalized vector.


Vector cross product :
----------------------

Prototypes :
t_vec4			cross_vec3(t_vec3 u, t_vec3 v);
t_vec4			cross_vec4(t_vec4 u, t_vec4 v);

Calculates the cross product of two vectors.

Parameters :
Two t_vecX structures u and v

Return Value :
A t_vecX structure containing the result of the cross product.


Vector dot product :
--------------------

Prototypes :
double			dot_vec3(t_vec3 u, t_vec3 v);
double			dot_vec4(t_vec4 u, t_vec4 v);

Calculates the dot product of two vectors.

Parameters :
Two t_vecX structures u and v.

Return Value :
A double variable containing the result of the dot product.





t_vec3			dmult_vec3(t_vec3 u, double n);
t_vec4			dmult_vec4(t_vec4 u, double n);
t_vec3			mult_vec3(t_vec3 u, t_vec3 v);

/*
** Matrix functions
*/

t_mtx4			identity(void);
t_mtx4			scale(double pitch_x, double pitch_y, double pitch_z);
t_mtx4			translate(double t_x, double t_y, double t_z);
t_mtx4			rotate(t_axis axis, double pitch);
t_mtx4			mtx4_mult(t_mtx4 m1, t_mtx4 m2);
t_vec4			new_coord(t_vec4 p, t_mtx4 mtx);

/*
** Quaternion functions
*/

t_vec4			axisangle_to_quat(t_vec4 axis, double angle);
t_vec4			euler_to_quat(t_vec3 rot);
double			norm_quat(t_vec4 q);
t_vec4			normalize_quat(t_vec4 q);
t_vec4			mult_quat(t_vec4 q1, t_vec4 q2);
t_mtx4			quat_to_mtx(t_vec4	q);